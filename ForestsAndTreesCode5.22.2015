# April Darger
# STAT 5600
# Final Project
library(rpart)
library(verification)
library(randomForest)
library(rattle)
library(rpart.plot)
library(RColorBrewer)

#The prp() has a lot of different options to check out
#prp(model)

#This one has the best default
#fancyRpartPlot(model)


#Combine SageLive, LPI, and soils
sageL <- read.csv("F:/ShrubDensity/SageLivePresenceAbsence.csv")
colnames(sageL) <- c("plot","sage")
lpi <- read.csv("F:/LPI/LPIRelativeCoverCommonInExcel.csv")
lpi <- lpi[-55,-c(1,8:10)] # Remove line 55 (IL2_9) because it is missing from shrub data
soils <- read.csv("F:/Soils/SoilEnvironmentalData.csv")
soils <- soils[-55,-1] # Remove line 55 (IL2_9) because it is missing from shrub data
colnames(soils) <- c("Elevation","maxClay","maxSand",
                     "minClay","minSand","maxDepth",
                     "maxpH","minpH","maxDryValue",
                     "minDryValue", "maxDryChroma", 
                     "minDryChroma", "maxMoistValue", 
                     "minMoistValue", "maxMoistChroma", 
                     "minMoistChroma","CarbonateStage", 
                     "BioticCrustClass")
pctType <- read.csv("F:/LPI/LPIRelativeCoverType.csv")
pctType <- pctType[-54,-1]

live <- cbind(sageL,lpi,soils,pctType)

#Kappa and Class Functions
kappa=function(x){
  n=sum(x)
  pobs=(x[1,1]+x[2,2])/n
  pexp=(sum(x[1,])*sum(x[,1])+sum(x[2,])*sum(x[,2]))/n^2
  kappa=(pobs-pexp)/(1-pexp)
  t1=0
  t2=0
  t3=0
  pii=x/n
  pidot=apply(pii,1,sum)
  pdotj=apply(pii,2,sum)
  for(i in 1:2){
    t1 = t1 + pii[i,i]*((1-pexp) - (1-pobs)*(pidot[i]+pdotj[i]))^2
  }
  t2 = pii[1,2]*(pdotj[1]+pidot[2])^2 + pii[2,1]*(pdotj[2] + pidot[1])^2
  t3 = (pobs*pexp-2*pexp+pobs)^2
  vhat = (t1 + t2*(1-pobs)^2 -t3)/(n*(1-pexp)^4)
  se=sqrt(vhat)
  return(c(kappa,se))
}


class.sum=function(truth,predicted){
  xt=table(truth,round(predicted+0.000001))
  pcc=round(100*sum(diag(xt))/sum(xt),2)
  spec=round(100*xt[1,1]/sum(xt[1,]),2)
  sens=round(100*xt[2,2]/sum(xt[2,]),2)
  kap=round(kappa(xt)[1],4)
  au=round(roc.area(truth,predicted)$A,4)
  list(round(c(pcc,spec,sens,kap,au),3))
}

####
#Classification Tree
####
# Using only ARTR (live)

full_tree = rpart(as.factor(sage) ~ 
                    maxClay + maxSand + minClay + minSand + maxDepth + 
                    maxpH + minpH + maxDryValue + minDryValue +
                    maxDryChroma + minDryChroma + maxMoistValue +
                    minMoistValue + maxMoistChroma + minMoistChroma +
                    CarbonateStage + BioticCrustClass + Elevation 
                , data = live, control = 
                    rpart.control(cp = 0.0, minsplit = 2))
plotcp(full_tree) #put this graph in homework and explain 


full_tree.confuse=table(live$sage,predict(full_tree,type="class"))
100-100*sum(diag(full_tree.confuse))/nrow(live)


# Above is for the full tree. Use first drop below SE to determine cp 
# cutoff. Nodes = 9, cp = 0.035
final_tree = rpart(as.factor(sage) ~ 
                     maxClay + maxSand + minClay + minSand + maxDepth + 
                     maxpH + minpH + maxDryValue + minDryValue +
                     maxDryChroma + minDryChroma + maxMoistValue +
                     minMoistValue + maxMoistChroma + minMoistChroma +
                     CarbonateStage + BioticCrustClass + Elevation 
                  , data = live, control = 
                     rpart.control(cp = 0.064, minsplit = 2))

plot(final_tree, margin=.3)
text(final_tree,use.n=TRUE)

final_tree.confuse=table(live$sage,predict(final_tree,type="class"))
100-100*sum(diag(final_tree.confuse))/nrow(live)

#The prp() has a lot of different options to check out
# extra = 3 gives misclassified/total in node
# under = T puts text under box
prp(final_tree, extra = 3, under = T, varlen = 0, faclen = 0, main = 'Live Sagebrush')

#This one has the best default
fancyRpartPlot(final_tree)

####
#Crossvalidation Classification Tree
####
# Using only ARTR (live)

final_tree.xval=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
  test=live[xvs==i,]
  train=live[xvs!=i,]
  glub= rpart(as.factor(sage) ~ 
                maxClay + maxSand + minClay + minSand + maxDepth + 
                maxpH + minpH + maxDryValue + minDryValue +
                maxDryChroma + minDryChroma + maxMoistValue +
                minMoistValue + maxMoistChroma + minMoistChroma +
                CarbonateStage + BioticCrustClass + Elevation 
              , data = train, control = 
                rpart.control(cp = 0.064, minsplit = 2))
  final_tree.xval[xvs==i]=predict(glub,test,type="class")
}

final_tree.confuse.xval=table(live$sage,final_tree.xval)
100-100*sum(diag(final_tree.confuse.xval))/nrow(live)
## Overall xval error rate is between 35 and 40 %

table(live$sage,round(final_tree.xval+ 0.0000001))
class.sum(live$sage,final_tree.xval)


####
#Random Forests
####
# Using only ARTR (live)

library(randomForest)

live.rf = randomForest(as.factor(sage) ~ 
                         maxClay + maxSand + minClay + minSand + maxDepth + 
                         maxpH + minpH + maxDryValue + minDryValue +
                         maxDryChroma + minDryChroma + maxMoistValue +
                         minMoistValue + maxMoistChroma + minMoistChroma +
                         CarbonateStage + BioticCrustClass + Elevation
                       , data = live,proximity=TRUE,importance=TRUE,
                       keep.forest=TRUE)

live.rf$confusion
class.sum(live$sage,predict(live.rf,type="prob")[,2])

varImpPlot(live.rf, main = 'Live Sagebrush')

####
## Crossvalidation
####

live.rf.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
  train=live[xvs!=i,]
  test=live[xvs==i,]
  rf=randomForest(as.factor(sage) ~ 
                    maxClay + maxSand + minClay + minSand + maxDepth + 
                    maxpH + minpH + maxDryValue + minDryValue +
                    maxDryChroma + minDryChroma + maxMoistValue +
                    minMoistValue + maxMoistChroma + minMoistChroma +
                    CarbonateStage + BioticCrustClass + Elevation 
                  ,data=train)
  live.rf.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}

live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)

table(live$sage,round(live.rf.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.xval.prob)


###
# Variable Importance and Partial Dependence Plots
###
varImpPlot(live.rf)

partialPlot(live.rf,live, maxDepth, which.class="1", main = 'Live Sagebrush Partial Dependence on Maximum Depth')

partialPlot(live.rf,live, minDryChroma, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Dry Chroma')

partialPlot(live.rf,live, BioticCrustClass, which.class="1", main = 'Live Sagebrush Partial Dependence on Biotic Crust Class')

partialPlot(live.rf,live, minClay, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Clay Percentage')

partialPlot(live.rf,live, minMoistChroma, which.class="1", main = 'Live Sagebrush Partial Dependence on Minimum Moist Chroma')

partialPlot(live.rf,live, maxpH, which.class="1", main = 'Live Sagebrush Partial Dependence on Maximum pH')

partialPlot(live.rf,live, Elevation, which.class="1", main = 'Live Sagebrush Partial Dependence on Elevation')


####
# Random Forests for Important Variable Only
####

live.rf.imp=randomForest(as.factor(sage)~ maxDepth + minDryChroma + 
                           BioticCrustClass  + minClay + minMoistChroma +
                           maxpH + Elevation
                       ,proximity=TRUE,importance=TRUE,keep.forest=TRUE,data=live)
live.rf.imp$confusion
class.sum(live$sage,predict(live.rf.imp,type="prob")[,2])

live.rf.confuse.xval=table(live$sage,live.rf.xval.prob)
100-100*sum(diag(live.rf.xval.prob))/nrow(live)
####
## Crossvalidation for Important Variables
####

live.rf.imp.xval.prob=rep(0,nrow(live))
xvs=rep(1:10,length=nrow(live))
xvs=sample(xvs)
for(i in 1:10){
  train=live[xvs!=i,]
  test=live[xvs==i,]
  rf=randomForest(as.factor(sage)~ maxDepth + minDryChroma + 
                    BioticCrustClass  + minClay + minMoistChroma +
                    maxpH + Elevation
                  ,data=train)
  live.rf.imp.xval.prob[xvs==i]=predict(rf,test,type="prob")[,2]
}

table(live$sage,round(live.rf.imp.xval.prob+ 0.0000001))
class.sum(live$sage,live.rf.imp.xval.prob)

live.rf.confuse.xval=table(live$sage,live.rf.imp.xval.prob)
100-100*sum(diag(live.rf.imp.xval.prob))/nrow(live)
